@page "/"
@page "/authentication/login-callback"
@page "/authentication/login-failed"
@using Azure.Storage.Blobs;
@using Azure.Storage.Sas;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Linq;
@using Microsoft.Extensions.Configuration
@using Azure;
@using Azure.Storage.Blobs.Models;
@using BlazorAzureBlobBrowser.AzureBlobStorage;

@inject IConfiguration Configuration
@inject IAccessTokenProvider TokenProvider
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h1>@Header</h1>
<AuthorizeView>
    <Authorized>
        <p><em>@Message</em></p>
        @if (Blobs != null)
        {
            string accountName = Configuration["StorageAccountName"];
            var containerName = Configuration["ContainerName"];

            foreach (var blob in Blobs.OrderByDescending(i => i.Properties.CreatedOn).Take(10))
            {
                var sasUrl = new Uri($"https://{accountName}.blob.core.windows.net/{containerName}/{blob.Name}?" + Sas);

                <div>
                    @if (blob.Name.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase))
                    {
                        <img src="@sasUrl" /><br />
                    }
                    else if (blob.Name.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase))
                    {
                        <video width="640" height="480" controls preload="none">
                            <source src="@sasUrl" type="video/mp4">
                        </video><br />
                    }
                    else if (blob.Name.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
                    {
                        <iframe src="@sasUrl" /><br />

                    }
                    <div>@blob.Name</div>
                </div><br />
            }
        }
    </Authorized>
    <NotAuthorized>
        Log in to view blobs.
    </NotAuthorized>
</AuthorizeView>


@code {
    private string Message = "Loading...";
    private string Header = "";
    private string Sas = "";

    private List<BlobItem> Blobs;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                string accountName = Configuration["StorageAccountName"];
                var containerName = Configuration["ContainerName"];
                var endpoint = new Uri($"https://{accountName}.blob.core.windows.net");

                Header = $"Blobs in {accountName}/{containerName}";

                var blobServiceClient = new BlobServiceClient(endpoint, new AccessTokenProviderTokenCredential(TokenProvider));

                var containerClient = blobServiceClient.GetBlobContainerClient(containerName);

                Blobs = await containerClient.GetBlobsAsync().AsAsyncEnumerable().ToListAsync();

                Sas = await GetSas(blobServiceClient);

                Message = "";
            }
            catch (AccessTokenNotAvailableException)
            {
                Message = "Access denied.";
            }
            catch (Exception x)
            {
                Message = x.Message;
            }
        }
        else if (new Uri(Navigation.Uri).LocalPath.StartsWith("/authentication"))
        {
            Navigation.NavigateTo($"/authentication/finalize");
        }
    }

    private async Task<string> GetSas(BlobServiceClient blobServiceClient)
    {
        string accountName = Configuration["StorageAccountName"];
        var containerName = Configuration["ContainerName"];

        var userDelegationKey = await blobServiceClient.GetUserDelegationKeyAsync(startsOn: null, expiresOn: DateTimeOffset.UtcNow.AddDays(1));

        await using var sasBuilder = new BlobSasBuilderWasm(BlobSasPermissions.Read, userDelegationKey.Value.SignedExpiresOn, JS)
        {
            BlobContainerName = containerName,
        };

        string result = await sasBuilder.GetSas(userDelegationKey, accountName);

        return result;
    }
}
