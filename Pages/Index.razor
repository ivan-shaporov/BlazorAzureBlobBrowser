@page "/"
@using Azure.Storage.Blobs;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Linq;
@using Microsoft.Extensions.Configuration

@inject IConfiguration Configuration
@inject IAccessTokenProvider TokenProvider

<h1>@Header</h1>
<AuthorizeView>
    <Authorized>
        @if (Blobnames == null)
        {
            <p><em>@Message</em></p>
        }
        else
        {
            <table class="table">
                <tbody>
                    @foreach (var blobname in Blobnames)
                    {
                        <tr>
                            <td>@blobname</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        Log in to view blobs.
    </NotAuthorized>
</AuthorizeView>


@code {
    private string Message = "Loading...";
    private string Header = "";
    private List<string> Blobnames;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                var endpoint = new Uri($"https://{Configuration["StorageAccountName"]}.blob.core.windows.net");
                var blobServiceClient = new BlobServiceClient(endpoint, new AccessTokenProviderTokenCredential(TokenProvider));

                var containerName = Configuration["ContainerName"];

                Header = $"Blobs in {containerName}";

                var containerClient = blobServiceClient.GetBlobContainerClient(containerName);

                var pages = await containerClient.GetBlobsAsync().AsPages().Select(p => p.Values.Select(v => v.Name).ToArray()).ToListAsync();

                Blobnames = pages.SelectMany(x => x).ToList();
            }
            catch (AccessTokenNotAvailableException)
            {
                Message = "Access denied.";
            }
            catch (Exception x)
            {
                Message = x.Message;
            }
        }
    }
}
